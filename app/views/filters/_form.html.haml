- if @mode.show_panel?
  %div(class="md:min-w-[25rem] md:max-w-[30vw]")
    - sources = params.dig(:filterrific, :filter_home).blank? ? Source.accessible_by(current_ability) : Source.accessible_by(current_ability).where(id: @all_words.joins(:sources).pluck('sources.id'))
    - topics = params.dig(:filterrific, :filter_home).blank? ? Topic.all : Topic.where(id: @all_words.joins(:topics).pluck('topics.id'))
    - hierarchies = params.dig(:filterrific, :filter_home).blank? ? Hierarchy.all : Hierarchy.where(id: @all_words.pluck(:hierarchy_id))
    - keywords = @all_words.count == Word.count ? Word.all : Word.where(id: Keyword.where(word_id: @all_words.pluck(:id)).pluck(:keyword_id))

    .ci-filter.p-5.bg-gray-background-highlight
      .flex.justify-center
        = link_to url_for(params.permit!.merge(mode: :omni)), class: 'flex mb-6 button items-center gap-1', 'data-turbo-frame': '_top' do
          = heroicon 'x-mark'
          = t('filter.close')

      %div= t 'filter.word_contains'
      .flex.gap-2
        = filter_text_field f, :wordstarts, inline: true, label: false, placeholder: t('filter.wordstarts')
        = filter_text_field f, :wordcontains, inline: true, label: false, placeholder: t('filter.wordcontains')
        = filter_text_field f, :wordends, inline: true, label: false, placeholder: t('filter.wordends')
      .mt-4
      = filter_text_field f, :syllablescontains
      = filter_select_field f, :topic, collection: topics.as_collection
      = filter_select_field f, :hierarchy, collection: hierarchies.as_collection
      = filter_select_field_with_and_or f, :keywords, collection: keywords.as_collection

      .mt-4
        - unless @mode.show_power_options?
          = link_to t('filter.more'), url_for(params.permit!.merge(mode: :power)), class: 'button'

        - if @mode.show_power_options?
          = filter_text_field f, :letters
          = filter_select_field f, :source, collection: sources.order(:name).map { |s| [s.name, s.id] }
          = filter_text_field f, :consonant_vowel, placeholder: 'KVVK', style: 'text-transform: uppercase', oninput: "this.value = this.value.replace(/[^KVkv]/, '')"
          = filter_select_field_with_and_or f, :phenomenons, collection: Phenomenon.as_collection
          = filter_select_field_with_and_or f, :strategies, collection: Strategy.as_collection
          = filter_check_box_field f, :foreign
          = filter_check_box_field f, :prototype
          = filter_check_box_field f, :compound
          = filter_check_box_field f, :example_sentences

          .mt-4
            - if @filter_type == "Noun"
              .flex.flex-col.gap-1
                = render "filters/noun", f:
            - if @filter_type == "Verb"
              .flex.flex-col.gap-1
                = render "filters/verb", f:
            - if @filter_type == "Adjective"
              .flex.flex-col.gap-1
                = render "filters/adjective", f:

          = link_to t('filter.less'), url_for(params.permit!.merge(mode: :advanced)), class: 'button'

      = button_tag t('filter.apply'), type: 'submit', class: 'sr-only', title: t('filter.apply')
